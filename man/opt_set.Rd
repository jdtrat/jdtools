% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/func_options.R
\name{opt_set}
\alias{opt_set}
\alias{opt_get}
\alias{opt_ls}
\alias{opt_rm}
\alias{opt_rm_all}
\title{Set, Get, and Remove (Package-Specific) Options}
\usage{
opt_set(option, package)

opt_get(option, package)

opt_ls(package)

opt_rm(option, package)

opt_rm_all(package)
}
\arguments{
\item{option}{A named vector or list corresponding to the options and values.}

\item{package}{A character string corresponding to the package name whose
prefix you would like to set.If the package parameter is not supplied,
these functions assume you are working on a package and will prefix the
options with the name of the package via \code{\link[desc:desc_get]{desc::desc_get()}}. If you do not
pass in a package parameter and are not working on a package, an error will
be thrown. Can also set the package parameter globally with
\code{options(jdtools.opts_package_name = "THE_PACKAGE_NAME")}.}
}
\value{
Either nothing, when used for option manipulations, or character
vectors of existing options.
}
\description{
These are utility functions for setting, getting, and removing
package-specific options. The
\href{https://withr.r-lib.org/articles/changing-and-restoring-state.html}{withr}
package describes the dangers of changing the landscape of R by modifying
things like search paths, global options, or working directories.
Specifically, they write "If the behavior of \emph{other} functions differs
before and after running your function, you've modified the landscape."

The \code{withr} package provides elegant solutions that are more in-line with
best practices. However, I found that there options I'd like to use within
personal packages, such as \code{jdtools}, and I believe it makes sense to
modify the R landscape. To avoid potential issues as best as possible, the
set of functions here prefix any options with a package name.

This allows users to make some changes to the R landscape but in a more
controlled manner that should avoid many conflicts.

Thanks to \href{https://github.com/tjmahr}{TJ Mahr}, \href{https://github.com/tanho63}{Tan Ho}, and Tyler Grant Smith for providing code
that helped solve option-setting issues.
}
\examples{

#' ## Always define package parameter
# List current {jdtools} options
opt_ls("jdtools")

# Set new options
# Either a list
opt_set(list(favorite_color = "black",
             favorite_food = "sushi",
             favorite_pet = "tucker"),
        "jdtools")
# Or a character vector
opt_set(c(favorite_color = "black",
          favorite_food = "sushi",
          favorite_pet = "tucker"),
        "jdtools")

opt_ls("jdtools")

# Either a list
opt_rm(list("favorite_color", "favorite_food"), "jdtools")

# Or a character vector
opt_rm(c("favorite_color", "favorite_food"), "jdtools")

opt_ls("jdtools")

# Can remove all at once in an interactive session:
if (interactive()) opt_rm_all("jdtools")


## Can set global package option to avoid specifying it in the future:
opt_set(c(opts_package_name = "jdtools"), "jdtools")

# List current {jdtools} options
opt_ls()

# Set new options
opt_set(c(favorite_color = "black",
          favorite_food = "sushi",
          favorite_pet = "tucker"))

opt_ls()

# Either a list
opt_rm(list("favorite_color", "favorite_food"))

opt_ls()

# Can remove all at once in an interactive session:
if (interactive()) opt_rm_all("jdtools")

}
